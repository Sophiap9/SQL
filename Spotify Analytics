# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

/*What is the average danceability by artist?*/
SELECT AVG(danceability), artist_name FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY AVG(danceability) ASC;

/*Who are the top 10 artists based on popularity?*/
SELECT artist_name, popularity FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

/*What artist released the longest song?*/
SELECT artist_name, MAX(duration_ms) FROM BIT_DB.Spotifydata;

/*What's the average duration across all songs?*/
SELECT AVG(duration_ms) FROM BIT_DB.Spotifydata;

/*What are the top 10 songs based on energy?*/
SELECT track_name, energy FROM BIT_DB.Spotifydata
ORDER BY energy DESC
LIMIT 10;

/*What artist released the shortest song?*/
SELECT artist_name, MIN(duration_ms) FROM BIT_DB.Spotifydata;

/*What is the average loudness for the 10 most popular songs?*/
SELECT AVG(loudness) FROM BIT_DB.Spotifydata
ORDER BY popularity DESC
LIMIT 10;

/*What is the name of the track and artist that is most popular?*/
SELECT track_name, artist_name, MAX(popularity) FROM BIT_DB.Spotifydata;

/*What is the name of the track and artist that is least popular?*/
SELECT track_name, artist_name, MIN(popularity) FROM BIT_DB.Spotifydata;
